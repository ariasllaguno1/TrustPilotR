name: An√°lisis TrustPilot con Script Python

on:
  workflow_dispatch:  # Permite ejecutarlo manualmente
    inputs:
      csv_file:
        description: 'Nombre del archivo CSV a analizar (ej: test.csv)'
        required: true
        default: 'test.csv'
      batch_size:
        description: 'N√∫mero de rese√±as por lote'
        required: false
        default: '10'
      max_reviews:
        description: 'M√°ximo n√∫mero de rese√±as a analizar (vac√≠o = todas)'
        required: false
        default: ''
      openrouter_model:
        description: 'Modelo de OpenRouter a usar'
        required: false
        default: 'google/gemini-2.5-flash'

jobs:
  analyze-reviews:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 horas m√°ximo
    
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Instalar dependencias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verificar archivo CSV
        run: |
          if [ ! -f "${{ github.event.inputs.csv_file }}" ]; then
            echo "‚ùå Error: No se encontr√≥ el archivo ${{ github.event.inputs.csv_file }}"
            echo "Archivos CSV disponibles:"
            find . -name "*.csv" -type f
            exit 1
          fi
          echo "‚úÖ Archivo encontrado: ${{ github.event.inputs.csv_file }}"
          echo "Tama√±o del archivo: $(du -h ${{ github.event.inputs.csv_file }})"
          echo "N√∫mero de l√≠neas: $(wc -l < ${{ github.event.inputs.csv_file }})"

      - name: Hacer el script ejecutable
        run: chmod +x trustpilot_analysis.py

      - name: Ejecutar an√°lisis
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY || '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' }}
        run: |
          # Verificar que la API key est√© configurada
          if [ -z "$OPENROUTER_API_KEY" ]; then
            echo "‚ùå Error: OPENROUTER_API_KEY no est√° configurada en los secrets del repositorio"
            echo "üìù Pasos para configurarla:"
            echo "1. Ve a Settings > Secrets and variables > Actions"
            echo "2. Haz clic en 'New repository secret'"
            echo "3. Nombre: OPENROUTER_API_KEY"
            echo "4. Valor: Tu API key de OpenRouter"
            exit 1
          fi
          
          # Construir argumentos del comando
          ARGS="${{ github.event.inputs.csv_file }}"
          ARGS="$ARGS --model ${{ github.event.inputs.openrouter_model }}"
          ARGS="$ARGS --batch-size ${{ github.event.inputs.batch_size }}"
          
          # Agregar max-reviews si se especifica
          if [ -n "${{ github.event.inputs.max_reviews }}" ]; then
            ARGS="$ARGS --max-reviews ${{ github.event.inputs.max_reviews }}"
          fi
          
          echo "üöÄ Ejecutando: python trustpilot_analysis.py $ARGS"
          
          # Ejecutar el script
          python trustpilot_analysis.py $ARGS || {
            echo "‚ùå Error ejecutando el script de an√°lisis"
            exit 1
          }

      - name: Verificar archivos generados
        if: always()
        run: |
          echo "üìÅ Archivos generados:"
          find . -name "*analyzed*.csv" -type f -exec ls -lh {} \; 2>/dev/null || echo "No se encontraron archivos de an√°lisis"
          find . -name "trustpilot_analyzed_*.csv" -type f -exec ls -lh {} \; 2>/dev/null || echo "No se encontraron archivos con timestamp"

      - name: Generar reporte de an√°lisis
        if: always()
        run: |
          echo "## üìä Resumen del An√°lisis de Rese√±as" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Informaci√≥n de par√°metros
          echo "### ‚öôÔ∏è Par√°metros utilizados:" >> $GITHUB_STEP_SUMMARY
          echo "- **Archivo CSV:** ${{ github.event.inputs.csv_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tama√±o de lote:** ${{ github.event.inputs.batch_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **M√°ximo de rese√±as:** ${{ github.event.inputs.max_reviews || 'Todas' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Modelo:** ${{ github.event.inputs.openrouter_model }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Buscar el archivo m√°s reciente de an√°lisis
          latest_csv=$(find . -name "*analyzed*.csv" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -d' ' -f2-)
          
          if [ -n "$latest_csv" ] && [ -f "$latest_csv" ]; then
            echo "### üìÅ Archivo de resultados:" >> $GITHUB_STEP_SUMMARY
            echo "- **Nombre:** $(basename $latest_csv)" >> $GITHUB_STEP_SUMMARY
            echo "- **Tama√±o:** $(du -h $latest_csv | cut -f1)" >> $GITHUB_STEP_SUMMARY
            
            # Contar l√≠neas (rese√±as procesadas)
            total_lines=$(wc -l < "$latest_csv" 2>/dev/null || echo "0")
            if [ "$total_lines" -gt 1 ]; then
              processed_reviews=$((total_lines - 1))  # Restar header
              echo "- **Rese√±as procesadas:** $processed_reviews" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Intentar extraer estad√≠sticas b√°sicas del CSV
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìà Estad√≠sticas r√°pidas:" >> $GITHUB_STEP_SUMMARY
            
            # Contar sentimientos si existe la columna
            if head -1 "$latest_csv" | grep -q "sentiment"; then
              sentiment_col=$(head -1 "$latest_csv" | tr ',' '\n' | grep -n "sentiment" | cut -d: -f1)
              if [ -n "$sentiment_col" ]; then
                echo "#### Sentimientos:" >> $GITHUB_STEP_SUMMARY
                tail -n +2 "$latest_csv" | cut -d',' -f"$sentiment_col" | sort | uniq -c | sort -nr | head -5 | while read count sentiment; do
                  echo "- **$sentiment:** $count rese√±as" >> $GITHUB_STEP_SUMMARY
                done
              fi
            fi
            
          else
            echo "### ‚ùå Estado del an√°lisis:" >> $GITHUB_STEP_SUMMARY
            echo "No se complet√≥ el an√°lisis correctamente o no se generaron archivos de salida." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Acceso a resultados:" >> $GITHUB_STEP_SUMMARY
          echo "Los resultados est√°n disponibles en la secci√≥n **Artifacts** de esta ejecuci√≥n." >> $GITHUB_STEP_SUMMARY

      - name: Subir archivos de an√°lisis como artefactos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trustpilot-analysis-results
          path: |
            *analyzed*.csv
            trustpilot_analyzed_*.csv
          retention-days: 30

      - name: Mostrar estad√≠sticas finales
        if: always()
        run: |
          echo ""
          echo "üéØ RESUMEN FINAL:"
          echo "================="
          
          # Buscar archivos de resultado
          result_files=$(find . -name "*analyzed*.csv" -type f | wc -l)
          echo "üìÑ Archivos de resultado generados: $result_files"
          
          if [ "$result_files" -gt 0 ]; then
            latest_file=$(find . -name "*analyzed*.csv" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -d' ' -f2-)
            echo "üìÅ Archivo principal: $(basename $latest_file)"
            echo "üíæ Tama√±o: $(du -h $latest_file | cut -f1)"
            
            total_lines=$(wc -l < "$latest_file" 2>/dev/null || echo "0")
            if [ "$total_lines" -gt 1 ]; then
              processed_reviews=$((total_lines - 1))
              echo "‚úÖ Rese√±as procesadas: $processed_reviews"
            fi
          else
            echo "‚ùå No se generaron archivos de resultado"
          fi
          
          echo ""
          echo "üîç Para descargar los resultados:"
          echo "1. Ve a la pesta√±a 'Actions' en GitHub"
          echo "2. Selecciona esta ejecuci√≥n del workflow"
          echo "3. Descarga los artefactos en la secci√≥n 'Artifacts'" 