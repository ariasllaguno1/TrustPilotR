name: An√°lisis TrustPilot con LLM

on:
  workflow_dispatch:  # Permite ejecutarlo manualmente
    inputs:
      csv_file:
        description: 'Nombre del archivo CSV a analizar (ej: test.csv)'
        required: true
        default: 'test.csv'
      batch_size:
        description: 'N√∫mero de rese√±as por lote'
        required: false
        default: '10'
      max_reviews:
        description: 'M√°ximo n√∫mero de rese√±as a analizar (vac√≠o = todas)'
        required: false
        default: ''
      openrouter_model:
        description: 'Modelo de OpenRouter a usar'
        required: false
        default: 'google/gemini-2.5-flash'

jobs:
  analyze-reviews:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 horas m√°ximo
    
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Actualizar requirements.txt para an√°lisis
        run: |
          # Agregar dependencias espec√≠ficas para el an√°lisis
          echo "requests" >> requirements.txt
          echo "matplotlib" >> requirements.txt
          echo "seaborn" >> requirements.txt
          echo "numpy" >> requirements.txt
          echo "jupyter" >> requirements.txt
          echo "nbconvert" >> requirements.txt
          echo "papermill" >> requirements.txt

      - name: Instalar dependencias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verificar archivo CSV
        run: |
          if [ ! -f "${{ github.event.inputs.csv_file }}" ]; then
            echo "‚ùå Error: No se encontr√≥ el archivo ${{ github.event.inputs.csv_file }}"
            echo "Archivos CSV disponibles:"
            find . -name "*.csv" -type f
            exit 1
          fi
          echo "‚úÖ Archivo encontrado: ${{ github.event.inputs.csv_file }}"
          echo "Tama√±o del archivo: $(du -h ${{ github.event.inputs.csv_file }})"
          echo "N√∫mero de l√≠neas: $(wc -l < ${{ github.event.inputs.csv_file }})"

      - name: Preparar par√°metros del notebook
        run: |
          # Crear archivo de par√°metros para papermill
          cat > analysis_params.yaml << EOF
          CSV_PATH: "${{ github.event.inputs.csv_file }}"
          BATCH_SIZE: ${{ github.event.inputs.batch_size }}
          MAX_REVIEWS: ${{ github.event.inputs.max_reviews != '' && github.event.inputs.max_reviews || 'None' }}
          MODEL: "${{ github.event.inputs.openrouter_model }}"
          OPENROUTER_API_KEY: "${{ secrets.OPENROUTER_API_KEY }}"
          EOF
          
          echo "Par√°metros configurados:"
          cat analysis_params.yaml

      - name: Ejecutar an√°lisis con papermill
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Verificar que la API key est√© configurada
          if [ -z "$OPENROUTER_API_KEY" ]; then
            echo "‚ùå Error: OPENROUTER_API_KEY no est√° configurada en los secrets del repositorio"
            echo "Por favor configura tu API key de OpenRouter en Settings > Secrets and variables > Actions"
            exit 1
          fi
          
          # Ejecutar el notebook con papermill
          papermill TrustPilotAnalysis.ipynb TrustPilotAnalysis_executed.ipynb \
            -f analysis_params.yaml \
            --log-output \
            --progress-bar || {
              echo "‚ùå Error ejecutando el notebook"
              echo "Revisando logs..."
              if [ -f TrustPilotAnalysis_executed.ipynb ]; then
                echo "Notebook parcialmente ejecutado disponible"
              fi
              exit 1
            }

      - name: Convertir notebook a HTML
        if: always()
        run: |
          if [ -f TrustPilotAnalysis_executed.ipynb ]; then
            jupyter nbconvert --to html TrustPilotAnalysis_executed.ipynb --output analysis_results.html
            echo "‚úÖ Notebook convertido a HTML"
          else
            echo "‚ö†Ô∏è No se pudo convertir el notebook a HTML"
          fi

      - name: Generar reporte de an√°lisis
        if: always()
        run: |
          echo "## üìä Resumen del An√°lisis de Rese√±as" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Informaci√≥n de par√°metros
          echo "### ‚öôÔ∏è Par√°metros utilizados:" >> $GITHUB_STEP_SUMMARY
          echo "- **Archivo CSV:** ${{ github.event.inputs.csv_file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tama√±o de lote:** ${{ github.event.inputs.batch_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **M√°ximo de rese√±as:** ${{ github.event.inputs.max_reviews || 'Todas' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Modelo:** ${{ github.event.inputs.openrouter_model }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Archivos generados
          echo "### üìÅ Archivos generados:" >> $GITHUB_STEP_SUMMARY
          csv_count=$(find . -name "*analyzed*.csv" -type f | wc -l)
          echo "- **Archivos CSV de an√°lisis:** $csv_count" >> $GITHUB_STEP_SUMMARY
          
          if [ -f analysis_results.html ]; then
            echo "- **Reporte HTML:** ‚úÖ Disponible" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Reporte HTML:** ‚ùå No generado" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Mostrar archivos encontrados
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Archivos de salida:" >> $GITHUB_STEP_SUMMARY
          find . -name "*analyzed*.csv" -type f -exec echo "- {}" \; >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "- Ning√∫n archivo CSV de an√°lisis encontrado" >> $GITHUB_STEP_SUMMARY

      - name: Listar todos los archivos generados
        if: always()
        run: |
          echo "üìÅ Archivos generados durante el an√°lisis:"
          find . -name "*.csv" -type f -exec ls -lh {} \; 2>/dev/null | head -20
          find . -name "*.html" -type f -exec ls -lh {} \; 2>/dev/null
          find . -name "*executed*.ipynb" -type f -exec ls -lh {} \; 2>/dev/null

      - name: Subir archivos de an√°lisis como artefactos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: analysis-results
          path: |
            *analyzed*.csv
            trustpilot_analyzed_*.csv
            analysis_results.html
            TrustPilotAnalysis_executed.ipynb
          retention-days: 30

      - name: Subir logs y archivos de debug
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: analysis-logs
          path: |
            analysis_params.yaml
            *.log
          retention-days: 7

      - name: Mostrar estad√≠sticas finales
        if: always()
        run: |
          echo "### üìà Estad√≠sticas del an√°lisis:" >> $GITHUB_STEP_SUMMARY
          
          # Buscar el archivo m√°s reciente de an√°lisis
          latest_csv=$(find . -name "*analyzed*.csv" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -d' ' -f2-)
          
          if [ -n "$latest_csv" ] && [ -f "$latest_csv" ]; then
            echo "- **Archivo de resultados:** $(basename $latest_csv)" >> $GITHUB_STEP_SUMMARY
            echo "- **Tama√±o del archivo:** $(du -h $latest_csv | cut -f1)" >> $GITHUB_STEP_SUMMARY
            
            # Contar l√≠neas (rese√±as procesadas)
            total_lines=$(wc -l < "$latest_csv" 2>/dev/null || echo "0")
            if [ "$total_lines" -gt 1 ]; then
              processed_reviews=$((total_lines - 1))  # Restar header
              echo "- **Rese√±as procesadas:** $processed_reviews" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Estado:** ‚ùå No se complet√≥ el an√°lisis correctamente" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Acceso a resultados:" >> $GITHUB_STEP_SUMMARY
          echo "Los resultados est√°n disponibles en la secci√≥n **Artifacts** de esta ejecuci√≥n." >> $GITHUB_STEP_SUMMARY